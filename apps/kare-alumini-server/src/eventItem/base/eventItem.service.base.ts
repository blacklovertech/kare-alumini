/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EventItem as PrismaEventItem } from "@prisma/client";

export class EventItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventItem.count(args);
  }

  async eventItems(
    args: Prisma.EventItemFindManyArgs
  ): Promise<PrismaEventItem[]> {
    return this.prisma.eventItem.findMany(args);
  }
  async eventItem(
    args: Prisma.EventItemFindUniqueArgs
  ): Promise<PrismaEventItem | null> {
    return this.prisma.eventItem.findUnique(args);
  }
  async createEventItem(
    args: Prisma.EventItemCreateArgs
  ): Promise<PrismaEventItem> {
    return this.prisma.eventItem.create(args);
  }
  async updateEventItem(
    args: Prisma.EventItemUpdateArgs
  ): Promise<PrismaEventItem> {
    return this.prisma.eventItem.update(args);
  }
  async deleteEventItem(
    args: Prisma.EventItemDeleteArgs
  ): Promise<PrismaEventItem> {
    return this.prisma.eventItem.delete(args);
  }
}
