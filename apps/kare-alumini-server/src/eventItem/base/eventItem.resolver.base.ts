/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EventItem } from "./EventItem";
import { EventItemCountArgs } from "./EventItemCountArgs";
import { EventItemFindManyArgs } from "./EventItemFindManyArgs";
import { EventItemFindUniqueArgs } from "./EventItemFindUniqueArgs";
import { CreateEventItemArgs } from "./CreateEventItemArgs";
import { UpdateEventItemArgs } from "./UpdateEventItemArgs";
import { DeleteEventItemArgs } from "./DeleteEventItemArgs";
import { EventItemService } from "../eventItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EventItem)
export class EventItemResolverBase {
  constructor(
    protected readonly service: EventItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EventItem",
    action: "read",
    possession: "any",
  })
  async _eventItemsMeta(
    @graphql.Args() args: EventItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EventItem])
  @nestAccessControl.UseRoles({
    resource: "EventItem",
    action: "read",
    possession: "any",
  })
  async eventItems(
    @graphql.Args() args: EventItemFindManyArgs
  ): Promise<EventItem[]> {
    return this.service.eventItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EventItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EventItem",
    action: "read",
    possession: "own",
  })
  async eventItem(
    @graphql.Args() args: EventItemFindUniqueArgs
  ): Promise<EventItem | null> {
    const result = await this.service.eventItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventItem)
  @nestAccessControl.UseRoles({
    resource: "EventItem",
    action: "create",
    possession: "any",
  })
  async createEventItem(
    @graphql.Args() args: CreateEventItemArgs
  ): Promise<EventItem> {
    return await this.service.createEventItem({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventItem)
  @nestAccessControl.UseRoles({
    resource: "EventItem",
    action: "update",
    possession: "any",
  })
  async updateEventItem(
    @graphql.Args() args: UpdateEventItemArgs
  ): Promise<EventItem | null> {
    try {
      return await this.service.updateEventItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventItem)
  @nestAccessControl.UseRoles({
    resource: "EventItem",
    action: "delete",
    possession: "any",
  })
  async deleteEventItem(
    @graphql.Args() args: DeleteEventItemArgs
  ): Promise<EventItem | null> {
    try {
      return await this.service.deleteEventItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
