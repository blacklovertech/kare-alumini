/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NetworkingTools as PrismaNetworkingTools,
} from "@prisma/client";

export class NetworkingToolsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NetworkingToolsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.networkingTools.count(args);
  }

  async networkingToolsItems(
    args: Prisma.NetworkingToolsFindManyArgs
  ): Promise<PrismaNetworkingTools[]> {
    return this.prisma.networkingTools.findMany(args);
  }
  async networkingTools(
    args: Prisma.NetworkingToolsFindUniqueArgs
  ): Promise<PrismaNetworkingTools | null> {
    return this.prisma.networkingTools.findUnique(args);
  }
  async createNetworkingTools(
    args: Prisma.NetworkingToolsCreateArgs
  ): Promise<PrismaNetworkingTools> {
    return this.prisma.networkingTools.create(args);
  }
  async updateNetworkingTools(
    args: Prisma.NetworkingToolsUpdateArgs
  ): Promise<PrismaNetworkingTools> {
    return this.prisma.networkingTools.update(args);
  }
  async deleteNetworkingTools(
    args: Prisma.NetworkingToolsDeleteArgs
  ): Promise<PrismaNetworkingTools> {
    return this.prisma.networkingTools.delete(args);
  }
}
