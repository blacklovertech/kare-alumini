/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NetworkingTools } from "./NetworkingTools";
import { NetworkingToolsCountArgs } from "./NetworkingToolsCountArgs";
import { NetworkingToolsFindManyArgs } from "./NetworkingToolsFindManyArgs";
import { NetworkingToolsFindUniqueArgs } from "./NetworkingToolsFindUniqueArgs";
import { DeleteNetworkingToolsArgs } from "./DeleteNetworkingToolsArgs";
import { NetworkingToolsService } from "../networkingTools.service";
@graphql.Resolver(() => NetworkingTools)
export class NetworkingToolsResolverBase {
  constructor(protected readonly service: NetworkingToolsService) {}

  async _networkingToolsItemsMeta(
    @graphql.Args() args: NetworkingToolsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NetworkingTools])
  async networkingToolsItems(
    @graphql.Args() args: NetworkingToolsFindManyArgs
  ): Promise<NetworkingTools[]> {
    return this.service.networkingToolsItems(args);
  }

  @graphql.Query(() => NetworkingTools, { nullable: true })
  async networkingTools(
    @graphql.Args() args: NetworkingToolsFindUniqueArgs
  ): Promise<NetworkingTools | null> {
    const result = await this.service.networkingTools(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NetworkingTools)
  async deleteNetworkingTools(
    @graphql.Args() args: DeleteNetworkingToolsArgs
  ): Promise<NetworkingTools | null> {
    try {
      return await this.service.deleteNetworkingTools(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
