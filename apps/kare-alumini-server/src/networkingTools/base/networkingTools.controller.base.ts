/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NetworkingToolsService } from "../networkingTools.service";
import { NetworkingToolsCreateInput } from "./NetworkingToolsCreateInput";
import { NetworkingTools } from "./NetworkingTools";
import { NetworkingToolsFindManyArgs } from "./NetworkingToolsFindManyArgs";
import { NetworkingToolsWhereUniqueInput } from "./NetworkingToolsWhereUniqueInput";
import { NetworkingToolsUpdateInput } from "./NetworkingToolsUpdateInput";

export class NetworkingToolsControllerBase {
  constructor(protected readonly service: NetworkingToolsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NetworkingTools })
  async createNetworkingTools(
    @common.Body() data: NetworkingToolsCreateInput
  ): Promise<NetworkingTools> {
    return await this.service.createNetworkingTools({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NetworkingTools] })
  @ApiNestedQuery(NetworkingToolsFindManyArgs)
  async networkingToolsItems(
    @common.Req() request: Request
  ): Promise<NetworkingTools[]> {
    const args = plainToClass(NetworkingToolsFindManyArgs, request.query);
    return this.service.networkingToolsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NetworkingTools })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async networkingTools(
    @common.Param() params: NetworkingToolsWhereUniqueInput
  ): Promise<NetworkingTools | null> {
    const result = await this.service.networkingTools({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NetworkingTools })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNetworkingTools(
    @common.Param() params: NetworkingToolsWhereUniqueInput,
    @common.Body() data: NetworkingToolsUpdateInput
  ): Promise<NetworkingTools | null> {
    try {
      return await this.service.updateNetworkingTools({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NetworkingTools })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNetworkingTools(
    @common.Param() params: NetworkingToolsWhereUniqueInput
  ): Promise<NetworkingTools | null> {
    try {
      return await this.service.deleteNetworkingTools({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
