/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MentorshipProgramService } from "../mentorshipProgram.service";
import { MentorshipProgramCreateInput } from "./MentorshipProgramCreateInput";
import { MentorshipProgram } from "./MentorshipProgram";
import { MentorshipProgramFindManyArgs } from "./MentorshipProgramFindManyArgs";
import { MentorshipProgramWhereUniqueInput } from "./MentorshipProgramWhereUniqueInput";
import { MentorshipProgramUpdateInput } from "./MentorshipProgramUpdateInput";

export class MentorshipProgramControllerBase {
  constructor(protected readonly service: MentorshipProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MentorshipProgram })
  async createMentorshipProgram(
    @common.Body() data: MentorshipProgramCreateInput
  ): Promise<MentorshipProgram> {
    return await this.service.createMentorshipProgram({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MentorshipProgram] })
  @ApiNestedQuery(MentorshipProgramFindManyArgs)
  async mentorshipPrograms(
    @common.Req() request: Request
  ): Promise<MentorshipProgram[]> {
    const args = plainToClass(MentorshipProgramFindManyArgs, request.query);
    return this.service.mentorshipPrograms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MentorshipProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mentorshipProgram(
    @common.Param() params: MentorshipProgramWhereUniqueInput
  ): Promise<MentorshipProgram | null> {
    const result = await this.service.mentorshipProgram({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MentorshipProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMentorshipProgram(
    @common.Param() params: MentorshipProgramWhereUniqueInput,
    @common.Body() data: MentorshipProgramUpdateInput
  ): Promise<MentorshipProgram | null> {
    try {
      return await this.service.updateMentorshipProgram({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MentorshipProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMentorshipProgram(
    @common.Param() params: MentorshipProgramWhereUniqueInput
  ): Promise<MentorshipProgram | null> {
    try {
      return await this.service.deleteMentorshipProgram({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
