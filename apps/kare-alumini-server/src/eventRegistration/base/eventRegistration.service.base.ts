/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EventRegistration as PrismaEventRegistration,
  Event as PrismaEvent,
  User as PrismaUser,
} from "@prisma/client";

export class EventRegistrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventRegistrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventRegistration.count(args);
  }

  async eventRegistrations(
    args: Prisma.EventRegistrationFindManyArgs
  ): Promise<PrismaEventRegistration[]> {
    return this.prisma.eventRegistration.findMany(args);
  }
  async eventRegistration(
    args: Prisma.EventRegistrationFindUniqueArgs
  ): Promise<PrismaEventRegistration | null> {
    return this.prisma.eventRegistration.findUnique(args);
  }
  async createEventRegistration(
    args: Prisma.EventRegistrationCreateArgs
  ): Promise<PrismaEventRegistration> {
    return this.prisma.eventRegistration.create(args);
  }
  async updateEventRegistration(
    args: Prisma.EventRegistrationUpdateArgs
  ): Promise<PrismaEventRegistration> {
    return this.prisma.eventRegistration.update(args);
  }
  async deleteEventRegistration(
    args: Prisma.EventRegistrationDeleteArgs
  ): Promise<PrismaEventRegistration> {
    return this.prisma.eventRegistration.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.eventRegistration
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.eventRegistration
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
