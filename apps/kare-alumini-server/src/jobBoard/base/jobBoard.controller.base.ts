/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobBoardService } from "../jobBoard.service";
import { JobBoardCreateInput } from "./JobBoardCreateInput";
import { JobBoard } from "./JobBoard";
import { JobBoardFindManyArgs } from "./JobBoardFindManyArgs";
import { JobBoardWhereUniqueInput } from "./JobBoardWhereUniqueInput";
import { JobBoardUpdateInput } from "./JobBoardUpdateInput";

export class JobBoardControllerBase {
  constructor(protected readonly service: JobBoardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobBoard })
  async createJobBoard(
    @common.Body() data: JobBoardCreateInput
  ): Promise<JobBoard> {
    return await this.service.createJobBoard({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobBoard] })
  @ApiNestedQuery(JobBoardFindManyArgs)
  async jobBoards(@common.Req() request: Request): Promise<JobBoard[]> {
    const args = plainToClass(JobBoardFindManyArgs, request.query);
    return this.service.jobBoards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobBoard(
    @common.Param() params: JobBoardWhereUniqueInput
  ): Promise<JobBoard | null> {
    const result = await this.service.jobBoard({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobBoard(
    @common.Param() params: JobBoardWhereUniqueInput,
    @common.Body() data: JobBoardUpdateInput
  ): Promise<JobBoard | null> {
    try {
      return await this.service.updateJobBoard({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobBoard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobBoard(
    @common.Param() params: JobBoardWhereUniqueInput
  ): Promise<JobBoard | null> {
    try {
      return await this.service.deleteJobBoard({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
