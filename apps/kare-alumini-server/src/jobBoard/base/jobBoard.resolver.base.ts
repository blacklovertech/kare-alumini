/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobBoard } from "./JobBoard";
import { JobBoardCountArgs } from "./JobBoardCountArgs";
import { JobBoardFindManyArgs } from "./JobBoardFindManyArgs";
import { JobBoardFindUniqueArgs } from "./JobBoardFindUniqueArgs";
import { DeleteJobBoardArgs } from "./DeleteJobBoardArgs";
import { JobBoardService } from "../jobBoard.service";
@graphql.Resolver(() => JobBoard)
export class JobBoardResolverBase {
  constructor(protected readonly service: JobBoardService) {}

  async _jobBoardsMeta(
    @graphql.Args() args: JobBoardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobBoard])
  async jobBoards(
    @graphql.Args() args: JobBoardFindManyArgs
  ): Promise<JobBoard[]> {
    return this.service.jobBoards(args);
  }

  @graphql.Query(() => JobBoard, { nullable: true })
  async jobBoard(
    @graphql.Args() args: JobBoardFindUniqueArgs
  ): Promise<JobBoard | null> {
    const result = await this.service.jobBoard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobBoard)
  async deleteJobBoard(
    @graphql.Args() args: DeleteJobBoardArgs
  ): Promise<JobBoard | null> {
    try {
      return await this.service.deleteJobBoard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
