/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewsAnnouncementService } from "../newsAnnouncement.service";
import { NewsAnnouncementCreateInput } from "./NewsAnnouncementCreateInput";
import { NewsAnnouncement } from "./NewsAnnouncement";
import { NewsAnnouncementFindManyArgs } from "./NewsAnnouncementFindManyArgs";
import { NewsAnnouncementWhereUniqueInput } from "./NewsAnnouncementWhereUniqueInput";
import { NewsAnnouncementUpdateInput } from "./NewsAnnouncementUpdateInput";

export class NewsAnnouncementControllerBase {
  constructor(protected readonly service: NewsAnnouncementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewsAnnouncement })
  async createNewsAnnouncement(
    @common.Body() data: NewsAnnouncementCreateInput
  ): Promise<NewsAnnouncement> {
    return await this.service.createNewsAnnouncement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewsAnnouncement] })
  @ApiNestedQuery(NewsAnnouncementFindManyArgs)
  async newsAnnouncements(
    @common.Req() request: Request
  ): Promise<NewsAnnouncement[]> {
    const args = plainToClass(NewsAnnouncementFindManyArgs, request.query);
    return this.service.newsAnnouncements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewsAnnouncement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newsAnnouncement(
    @common.Param() params: NewsAnnouncementWhereUniqueInput
  ): Promise<NewsAnnouncement | null> {
    const result = await this.service.newsAnnouncement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewsAnnouncement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNewsAnnouncement(
    @common.Param() params: NewsAnnouncementWhereUniqueInput,
    @common.Body() data: NewsAnnouncementUpdateInput
  ): Promise<NewsAnnouncement | null> {
    try {
      return await this.service.updateNewsAnnouncement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewsAnnouncement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewsAnnouncement(
    @common.Param() params: NewsAnnouncementWhereUniqueInput
  ): Promise<NewsAnnouncement | null> {
    try {
      return await this.service.deleteNewsAnnouncement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
