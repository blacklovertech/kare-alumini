/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NewsAnnouncement } from "./NewsAnnouncement";
import { NewsAnnouncementCountArgs } from "./NewsAnnouncementCountArgs";
import { NewsAnnouncementFindManyArgs } from "./NewsAnnouncementFindManyArgs";
import { NewsAnnouncementFindUniqueArgs } from "./NewsAnnouncementFindUniqueArgs";
import { DeleteNewsAnnouncementArgs } from "./DeleteNewsAnnouncementArgs";
import { NewsAnnouncementService } from "../newsAnnouncement.service";
@graphql.Resolver(() => NewsAnnouncement)
export class NewsAnnouncementResolverBase {
  constructor(protected readonly service: NewsAnnouncementService) {}

  async _newsAnnouncementsMeta(
    @graphql.Args() args: NewsAnnouncementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NewsAnnouncement])
  async newsAnnouncements(
    @graphql.Args() args: NewsAnnouncementFindManyArgs
  ): Promise<NewsAnnouncement[]> {
    return this.service.newsAnnouncements(args);
  }

  @graphql.Query(() => NewsAnnouncement, { nullable: true })
  async newsAnnouncement(
    @graphql.Args() args: NewsAnnouncementFindUniqueArgs
  ): Promise<NewsAnnouncement | null> {
    const result = await this.service.newsAnnouncement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewsAnnouncement)
  async deleteNewsAnnouncement(
    @graphql.Args() args: DeleteNewsAnnouncementArgs
  ): Promise<NewsAnnouncement | null> {
    try {
      return await this.service.deleteNewsAnnouncement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
