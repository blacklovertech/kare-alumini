/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NewsAnnouncement as PrismaNewsAnnouncement,
} from "@prisma/client";

export class NewsAnnouncementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewsAnnouncementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newsAnnouncement.count(args);
  }

  async newsAnnouncements(
    args: Prisma.NewsAnnouncementFindManyArgs
  ): Promise<PrismaNewsAnnouncement[]> {
    return this.prisma.newsAnnouncement.findMany(args);
  }
  async newsAnnouncement(
    args: Prisma.NewsAnnouncementFindUniqueArgs
  ): Promise<PrismaNewsAnnouncement | null> {
    return this.prisma.newsAnnouncement.findUnique(args);
  }
  async createNewsAnnouncement(
    args: Prisma.NewsAnnouncementCreateArgs
  ): Promise<PrismaNewsAnnouncement> {
    return this.prisma.newsAnnouncement.create(args);
  }
  async updateNewsAnnouncement(
    args: Prisma.NewsAnnouncementUpdateArgs
  ): Promise<PrismaNewsAnnouncement> {
    return this.prisma.newsAnnouncement.update(args);
  }
  async deleteNewsAnnouncement(
    args: Prisma.NewsAnnouncementDeleteArgs
  ): Promise<PrismaNewsAnnouncement> {
    return this.prisma.newsAnnouncement.delete(args);
  }
}
