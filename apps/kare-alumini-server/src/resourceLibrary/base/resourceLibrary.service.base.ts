/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ResourceLibrary as PrismaResourceLibrary,
} from "@prisma/client";

export class ResourceLibraryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResourceLibraryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.resourceLibrary.count(args);
  }

  async resourceLibraries(
    args: Prisma.ResourceLibraryFindManyArgs
  ): Promise<PrismaResourceLibrary[]> {
    return this.prisma.resourceLibrary.findMany(args);
  }
  async resourceLibrary(
    args: Prisma.ResourceLibraryFindUniqueArgs
  ): Promise<PrismaResourceLibrary | null> {
    return this.prisma.resourceLibrary.findUnique(args);
  }
  async createResourceLibrary(
    args: Prisma.ResourceLibraryCreateArgs
  ): Promise<PrismaResourceLibrary> {
    return this.prisma.resourceLibrary.create(args);
  }
  async updateResourceLibrary(
    args: Prisma.ResourceLibraryUpdateArgs
  ): Promise<PrismaResourceLibrary> {
    return this.prisma.resourceLibrary.update(args);
  }
  async deleteResourceLibrary(
    args: Prisma.ResourceLibraryDeleteArgs
  ): Promise<PrismaResourceLibrary> {
    return this.prisma.resourceLibrary.delete(args);
  }
}
