/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResourceLibraryService } from "../resourceLibrary.service";
import { ResourceLibraryCreateInput } from "./ResourceLibraryCreateInput";
import { ResourceLibrary } from "./ResourceLibrary";
import { ResourceLibraryFindManyArgs } from "./ResourceLibraryFindManyArgs";
import { ResourceLibraryWhereUniqueInput } from "./ResourceLibraryWhereUniqueInput";
import { ResourceLibraryUpdateInput } from "./ResourceLibraryUpdateInput";

export class ResourceLibraryControllerBase {
  constructor(protected readonly service: ResourceLibraryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ResourceLibrary })
  async createResourceLibrary(
    @common.Body() data: ResourceLibraryCreateInput
  ): Promise<ResourceLibrary> {
    return await this.service.createResourceLibrary({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ResourceLibrary] })
  @ApiNestedQuery(ResourceLibraryFindManyArgs)
  async resourceLibraries(
    @common.Req() request: Request
  ): Promise<ResourceLibrary[]> {
    const args = plainToClass(ResourceLibraryFindManyArgs, request.query);
    return this.service.resourceLibraries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ResourceLibrary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async resourceLibrary(
    @common.Param() params: ResourceLibraryWhereUniqueInput
  ): Promise<ResourceLibrary | null> {
    const result = await this.service.resourceLibrary({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ResourceLibrary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResourceLibrary(
    @common.Param() params: ResourceLibraryWhereUniqueInput,
    @common.Body() data: ResourceLibraryUpdateInput
  ): Promise<ResourceLibrary | null> {
    try {
      return await this.service.updateResourceLibrary({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ResourceLibrary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResourceLibrary(
    @common.Param() params: ResourceLibraryWhereUniqueInput
  ): Promise<ResourceLibrary | null> {
    try {
      return await this.service.deleteResourceLibrary({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
